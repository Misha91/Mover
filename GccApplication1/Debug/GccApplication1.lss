
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005e0  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000507  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ca  00000000  00000000  00000dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000365  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016c  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__vector_2>
   6:	b9 c0       	rjmp	.+370    	; 0x17a <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	cc c0       	rjmp	.+408    	; 0x1d6 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
int main(void)
{
    /* Replace with your application code */
	
	
	DDRB |= (1<<dir) | (1<<step);
  40:	87 b3       	in	r24, 0x17	; 23
  42:	88 61       	ori	r24, 0x18	; 24
  44:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1<<es1) | (1<<es2) | (1<<butt));
  46:	87 b3       	in	r24, 0x17	; 23
  48:	88 7f       	andi	r24, 0xF8	; 248
  4a:	87 bb       	out	0x17, r24	; 23
	
	PORTB |= (1 << butt);
  4c:	c2 9a       	sbi	0x18, 2	; 24
	PORTB &= ~(1<<dir);
  4e:	c3 98       	cbi	0x18, 3	; 24
	
	TCCR1 |= (1 << CTC1);  // clear timer on compare match
  50:	80 b7       	in	r24, 0x30	; 48
  52:	80 68       	ori	r24, 0x80	; 128
  54:	80 bf       	out	0x30, r24	; 48
	TCCR1|=( (1<<CS13)|(1<<CS11)|(1<<CS10) ); // prescaler 64
  56:	80 b7       	in	r24, 0x30	; 48
  58:	8b 60       	ori	r24, 0x0B	; 11
  5a:	80 bf       	out	0x30, r24	; 48
	OCR1C = 5; // compare match value
  5c:	85 e0       	ldi	r24, 0x05	; 5
  5e:	8d bd       	out	0x2d, r24	; 45
	TIMSK |= (1 << OCIE1A); // enable compare match interrupt
  60:	89 b7       	in	r24, 0x39	; 57
  62:	80 64       	ori	r24, 0x40	; 64
  64:	89 bf       	out	0x39, r24	; 57
	  
	GIMSK |= (1 << PCIE);   // pin change interrupt enable
  66:	8b b7       	in	r24, 0x3b	; 59
  68:	80 62       	ori	r24, 0x20	; 32
  6a:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<< PCINT0) | (1<<PCINT1) | (1 << PCINT2); // pin change interrupt enabled for PCINT4
  6c:	85 b3       	in	r24, 0x15	; 21
  6e:	87 60       	ori	r24, 0x07	; 7
  70:	85 bb       	out	0x15, r24	; 21
	MCUCR |= (1 << ISC01) | (0 << ISC00); // Button trigers on raise
  72:	85 b7       	in	r24, 0x35	; 53
  74:	82 60       	ori	r24, 0x02	; 2
  76:	85 bf       	out	0x35, r24	; 53
	sei();                  // enable interrupts
  78:	78 94       	sei
			while((!(PINB &(1<<es2)) || !(PINB &(1<<es1))) && !changed && ok){
				
				c++;
				if (c >= 2){
					
					if (!(PINB &(1<<es2)) && PINB &(1<<dir)) PORTB ^= (1<<dir);
  7a:	58 e0       	ldi	r21, 0x08	; 8
					if (!(PINB &(1<<es1)) && !(PINB &(1<<dir)) ){
						ok = false;
						PORTB |= (1<<dir);
						
						for (int i(0); i<250; i++){
							PORTB ^= (1<<step);
  7c:	90 e1       	ldi	r25, 0x10	; 16
						PORTB &= ~(1<<dir);
						PORTB &= ~(1<<step);
						PORTB &= ~((1<<es1) | (1<<es2));
					}
					
					changed = true;
  7e:	41 e0       	ldi	r20, 0x01	; 1
	sei();                  // enable interrupts
	
	
    while (1) 
    {		uint8_t c = 0;
			while((!(PINB &(1<<es2)) || !(PINB &(1<<es1))) && !changed && ok){
  80:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <changed>
  84:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <ok>
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	b0 9b       	sbis	0x16, 0	; 22
  8c:	02 c0       	rjmp	.+4      	; 0x92 <main+0x52>
  8e:	b1 99       	sbic	0x16, 1	; 22
  90:	f7 cf       	rjmp	.-18     	; 0x80 <main+0x40>
  92:	21 11       	cpse	r18, r1
  94:	f5 cf       	rjmp	.-22     	; 0x80 <main+0x40>
  96:	33 23       	and	r19, r19
  98:	99 f3       	breq	.-26     	; 0x80 <main+0x40>
  9a:	81 50       	subi	r24, 0x01	; 1
				
				c++;
				if (c >= 2){
  9c:	b1 f7       	brne	.-20     	; 0x8a <main+0x4a>
					
					if (!(PINB &(1<<es2)) && PINB &(1<<dir)) PORTB ^= (1<<dir);
  9e:	b0 99       	sbic	0x16, 0	; 22
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x66>
  a2:	b3 99       	sbic	0x16, 3	; 22
  a4:	1d c0       	rjmp	.+58     	; 0xe0 <main+0xa0>
					
					if (!(PINB &(1<<es1)) && !(PINB &(1<<dir)) ){
  a6:	b1 99       	sbic	0x16, 1	; 22
  a8:	14 c0       	rjmp	.+40     	; 0xd2 <main+0x92>
  aa:	b3 9b       	sbis	0x16, 3	; 22
  ac:	1d c0       	rjmp	.+58     	; 0xe8 <main+0xa8>
  ae:	11 c0       	rjmp	.+34     	; 0xd2 <main+0x92>
						ok = false;
						PORTB |= (1<<dir);
						
						for (int i(0); i<250; i++){
							PORTB ^= (1<<step);
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	89 27       	eor	r24, r25
  b4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	e3 ed       	ldi	r30, 0xD3	; 211
  b8:	f0 e3       	ldi	r31, 0x30	; 48
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x7a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x80>
  c0:	00 00       	nop
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	31 09       	sbc	r19, r1
					
					if (!(PINB &(1<<es1)) && !(PINB &(1<<dir)) ){
						ok = false;
						PORTB |= (1<<dir);
						
						for (int i(0); i<250; i++){
  c6:	a1 f7       	brne	.-24     	; 0xb0 <main+0x70>
							PORTB ^= (1<<step);
							_delay_ms(50);
						}
						PORTB &= ~(1<<dir);
  c8:	c3 98       	cbi	0x18, 3	; 24
						PORTB &= ~(1<<step);
  ca:	c4 98       	cbi	0x18, 4	; 24
						PORTB &= ~((1<<es1) | (1<<es2));
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	8c 7f       	andi	r24, 0xFC	; 252
  d0:	88 bb       	out	0x18, r24	; 24
					}
					
					changed = true;
  d2:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <changed>
					c=0;
					counter = 0;
  d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  de:	d0 cf       	rjmp	.-96     	; 0x80 <main+0x40>
			while((!(PINB &(1<<es2)) || !(PINB &(1<<es1))) && !changed && ok){
				
				c++;
				if (c >= 2){
					
					if (!(PINB &(1<<es2)) && PINB &(1<<dir)) PORTB ^= (1<<dir);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	85 27       	eor	r24, r21
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	df cf       	rjmp	.-66     	; 0xa6 <main+0x66>
					
					if (!(PINB &(1<<es1)) && !(PINB &(1<<dir)) ){
						ok = false;
  e8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ok>
						PORTB |= (1<<dir);
  ec:	c3 9a       	sbi	0x18, 3	; 24
  ee:	2a ef       	ldi	r18, 0xFA	; 250
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	de cf       	rjmp	.-68     	; 0xb0 <main+0x70>

000000f4 <__vector_2>:
		}
}



ISR(PCINT0_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24

// 	if (ok){
// 		PORTB ^= (1<<dir);	
// 		ok = false;	
// 	}
	if (!(PINB &(1<<butt)) && !changed && !ok) {
 100:	b2 99       	sbic	0x16, 2	; 22
 102:	09 c0       	rjmp	.+18     	; 0x116 <__vector_2+0x22>
 104:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <changed>
 108:	81 11       	cpse	r24, r1
 10a:	30 c0       	rjmp	.+96     	; 0x16c <__vector_2+0x78>
 10c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ok>
 110:	81 11       	cpse	r24, r1
 112:	29 c0       	rjmp	.+82     	; 0x166 <__vector_2+0x72>
 114:	0b c0       	rjmp	.+22     	; 0x12c <__vector_2+0x38>
		ok = true;
		changed = true;
		counter = 0;
	}
	
	if (!(PINB &(1<<butt)) && !changed && ok) {
 116:	b2 99       	sbic	0x16, 2	; 22
 118:	2a c0       	rjmp	.+84     	; 0x16e <__vector_2+0x7a>
 11a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <changed>
 11e:	81 11       	cpse	r24, r1
 120:	26 c0       	rjmp	.+76     	; 0x16e <__vector_2+0x7a>
 122:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ok>
 126:	81 11       	cpse	r24, r1
 128:	0f c0       	rjmp	.+30     	; 0x148 <__vector_2+0x54>
 12a:	21 c0       	rjmp	.+66     	; 0x16e <__vector_2+0x7a>
// 	if (ok){
// 		PORTB ^= (1<<dir);	
// 		ok = false;	
// 	}
	if (!(PINB &(1<<butt)) && !changed && !ok) {
		PORTB |= (1<<dir);
 12c:	c3 9a       	sbi	0x18, 3	; 24
		PORTB |= (1<<es1) | (1<<es2);
 12e:	88 b3       	in	r24, 0x18	; 24
 130:	83 60       	ori	r24, 0x03	; 3
 132:	88 bb       	out	0x18, r24	; 24
		ok = true;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ok>
		changed = true;
 13a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <changed>
		counter = 0;
 13e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 142:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 146:	12 c0       	rjmp	.+36     	; 0x16c <__vector_2+0x78>
	}
	
	if (!(PINB &(1<<butt)) && !changed && ok) {
		ok = false;
 148:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ok>
		PORTB &= ~(1<<dir);
 14c:	c3 98       	cbi	0x18, 3	; 24
		PORTB &= ~(1<<step);
 14e:	c4 98       	cbi	0x18, 4	; 24
		PORTB &= ~((1<<es1) | (1<<es2));
 150:	88 b3       	in	r24, 0x18	; 24
 152:	8c 7f       	andi	r24, 0xFC	; 252
 154:	88 bb       	out	0x18, r24	; 24
		changed = true;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <changed>
		counter = 0;
 15c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 160:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 164:	04 c0       	rjmp	.+8      	; 0x16e <__vector_2+0x7a>
		ok = true;
		changed = true;
		counter = 0;
	}
	
	if (!(PINB &(1<<butt)) && !changed && ok) {
 166:	b2 9b       	sbis	0x16, 2	; 22
 168:	dc cf       	rjmp	.-72     	; 0x122 <__vector_2+0x2e>
 16a:	01 c0       	rjmp	.+2      	; 0x16e <__vector_2+0x7a>
 16c:	86 b3       	in	r24, 0x16	; 22
		changed = true;
		counter = 0;
	}
		
	//ok = !ok;
}
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_3>:


ISR(TIMER1_COMPA_vect)
{	
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
	counter++;
 18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 18e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 198:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	if(counter == 750){
 19c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1a0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 1a4:	8e 3e       	cpi	r24, 0xEE	; 238
 1a6:	92 40       	sbci	r25, 0x02	; 2
 1a8:	31 f4       	brne	.+12     	; 0x1b6 <__vector_3+0x3c>
		changed = false;
 1aa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <changed>
		counter = 0;
 1ae:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 1b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	
	 if (ok) PORTB ^= (1<<step);
 1b6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ok>
 1ba:	88 23       	and	r24, r24
 1bc:	21 f0       	breq	.+8      	; 0x1c6 <__vector_3+0x4c>
 1be:	98 b3       	in	r25, 0x18	; 24
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	89 27       	eor	r24, r25
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
